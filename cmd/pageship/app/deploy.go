package app

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/fs"
	"os"

	"github.com/dustin/go-humanize"
	"github.com/manifoldco/promptui"
	"github.com/oursky/pageship/internal/api"
	"github.com/oursky/pageship/internal/config"
	"github.com/oursky/pageship/internal/deploy"
	"github.com/oursky/pageship/internal/models"
	"github.com/oursky/pageship/internal/time"
	"github.com/schollz/progressbar/v3"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

func init() {
	rootCmd.AddCommand(deployCmd)

	deployCmd.PersistentFlags().String("site", "", "site to deploy")
	deployCmd.PersistentFlags().String("name", "", "deployment name; autogenerated if not set")
	deployCmd.PersistentFlags().BoolP("yes", "y", false, "skip confirmation")
}

func packTar(fsys fs.FS, tarfile *os.File, conf *config.Config) ([]models.FileEntry, int64, error) {
	modTime := time.SystemClock.Now()
	collector, err := deploy.NewCollector(modTime, tarfile)
	if err != nil {
		return nil, 0, err
	}
	defer collector.Close()

	actualPublicDir := conf.Site.Public
	conf.Site.Public = "public"

	confJSON, err := json.MarshalIndent(conf, "", "\t")
	if err != nil {
		return nil, 0, err
	}
	err = collector.AddFile(fmt.Sprintf("/%s.json", config.SiteConfigName), confJSON)
	if err != nil {
		return nil, 0, err
	}

	publicFsys, err := fs.Sub(fsys, actualPublicDir)
	if err != nil {
		return nil, 0, err
	}
	err = collector.Collect(publicFsys, "/public")
	if err != nil {
		return nil, 0, err
	}

	collector.Close()

	_, err = tarfile.Seek(0, io.SeekStart)
	if err != nil {
		return nil, 0, err
	}

	fi, err := tarfile.Stat()
	if err != nil {
		return nil, 0, err
	}

	return collector.Files(), fi.Size(), nil
}

func doDeploy(ctx context.Context, appID string, siteName string, deploymentName string, conf *config.Config, fsys fs.FS) {
	tarfile, err := os.CreateTemp("", fmt.Sprintf("pageship-%s-%s-*.tar.zst", appID, deploymentName))
	if err != nil {
		Error("Failed to create temp file: %s", err)
		return
	}
	defer os.Remove(tarfile.Name())

	Info("Collecting files...")
	Debug("Tarball: %s", tarfile.Name())
	files, tarSize, err := packTar(fsys, tarfile, conf)
	if err != nil {
		Error("failed to collect files: %s", err)
		return
	}

	Info("%d files found. Tarball size: %s", len(files), humanize.Bytes(uint64(tarSize)))

	Debug("Configuring app...")
	_, err = apiClient.ConfigureApp(ctx, appID, &conf.AppConfig)
	if err != nil {
		Error("Failed to configure app: %s", err)
		return
	}

	Info("Setting up deployment '%s'...", deploymentName)

	if siteName != "" {
		site, err := apiClient.CreateSite(ctx, appID, siteName)
		if err != nil {
			Error("Failed to setup site: %s", err)
			return
		}
		Debug("Site ID: %s", site.ID)
		lastDeploymentName := "-"
		if site.DeploymentName != nil {
			lastDeploymentName = *site.DeploymentName
		}
		Debug("Last Deployment Name: %s", lastDeploymentName)
	} else {
		Info("Site not specified; deployment would not be assigned to site")
	}

	deployment, err := apiClient.SetupDeployment(ctx, appID, deploymentName, files, &conf.Site)
	if err != nil {
		Error("Failed to setup deployment: %s", err)
		return
	}

	Debug("Deployment ID: %s", deployment.ID)
	Debug("Deployment Name: %s", deployment.Name)

	bar := progressbar.DefaultBytes(tarSize, "uploading")
	body := io.TeeReader(tarfile, bar)
	deployment, err = apiClient.UploadDeploymentTarball(ctx, appID, deployment.Name, body)
	if err != nil {
		Error("Failed to upload tarball: %s", err)
		return
	}

	if siteName != "" {
		Info("Activating deployment...")
		_, err = apiClient.UpdateSite(ctx, appID, siteName, &api.SitePatchRequest{
			DeploymentName: &deployment.Name,
		})
		if err != nil {
			Error("Failed to activate deployment: %s", err)
			return
		}
	}

	Info("Done!")
}

var deployCmd = &cobra.Command{
	Use:   "deploy directory",
	Short: "Deploy site",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		site := viper.GetString("site")
		name := viper.GetString("name")
		yes := viper.GetBool("yes")
		fsys := os.DirFS(args[0])

		if name == "" {
			name = models.RandomID(4)
		}

		loader := config.NewLoader(config.SiteConfigName)

		conf := config.DefaultConfig()
		if err := loader.Load(fsys, &conf); err != nil {
			Error("Failed to load config: %s", err)
			return
		}
		conf.SetDefaults()

		appID := conf.ID
		if site == "" {
			site = conf.DefaultSite
		}

		if !config.ValidateDNSLabel(site) {
			Error("Invalid site name; site name must be a valid DNS label: %s", site)
			return
		}

		env, ok := conf.ResolveSite(site)
		if !ok {
			Error("Site is not defined by any environment: %s", site)
			return
		}

		if !yes {
			var label string
			if site == env.Name {
				label = fmt.Sprintf("Deploy to site '%s' of app '%s'?", site, appID)
			} else {
				label = fmt.Sprintf("Deploy to site '%s' (%s) of app '%s'?", site, env.Name, appID)
			}

			prompt := promptui.Prompt{Label: label, IsConfirm: true}
			_, err := prompt.Run()
			if err != nil {
				Info("Cancelled.")
				return
			}
		}

		doDeploy(cmd.Context(), appID, site, name, &conf, fsys)
	},
}
